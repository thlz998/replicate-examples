#!/usr/bin/env python3
import sys
import tempfile
from huggingface_hub import login
import diffusers
import torch

# append project directory to path so predict.py can be imported
sys.path.append(".")

from predict import CACHE_DIR

with tempfile.TemporaryDirectory() as temp_dir:
    print("----------------------download----------------------", temp_dir)
    login(token="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")
    temp_dir = temp_dir + "/qr-pattern"
    print("----------------------download----------------------", temp_dir)
    controlnet = diffusers.ControlNetModel.from_pretrained(
        "Nacholmo/controlnet-qr-pattern",
        torch_dtype=torch.float16,
        cache_dir=temp_dir
    )
    pipe = diffusers.StableDiffusionControlNetImg2ImgPipeline.from_pretrained(
        "gsdf/Counterfeit-V2.5",
        # "stablediffusionapi/ghostmix",
        # "runwayml/stable-diffusion-v1-5",
        controlnet=controlnet,
        safety_checker=None,
        torch_dtype=torch.float16,
        cache_dir=temp_dir,
    ).to("cuda")
    pipe.unet.load_attn_procs("sayakpaul/sd-model-finetuned-lora-t4", cache_dir=temp_dir)
    pipe.scheduler = diffusers.DPMSolverMultistepScheduler.from_config(
        pipe.scheduler.config, use_karras=True, algorithm_type="sde-dpmsolver++", cache_dir=temp_dir
    )
    # pipe.save_pretrained(CACHE_DIR, safe_serialization=True)
    print("Done------" + temp_dir)
    temp_dir = temp_dir + "/canny"
    controlnet_canny = diffusers.ControlNetModel.from_pretrained(
        "lllyasviel/sd-controlnet-canny", 
        torch_dtype=torch.float16,
        cache_dir=temp_dir)
    pipe = diffusers.StableDiffusionControlNetImg2ImgPipeline.from_pretrained(
        # "gsdf/Counterfeit-V2.5",
        # "stablediffusionapi/ghostmix",
        "runwayml/stable-diffusion-v1-5",
        controlnet=controlnet_canny,
        safety_checker=None,
        torch_dtype=torch.float16,
        cache_dir=temp_dir,
    ).to("cuda")
    pipe.unet.load_attn_procs("sayakpaul/sd-model-finetuned-lora-t4", cache_dir=temp_dir)
    pipe.scheduler = diffusers.DPMSolverMultistepScheduler.from_config(
        pipe.scheduler.config, use_karras=True, algorithm_type="sde-dpmsolver++", cache_dir=temp_dir
    )
    # pipe.save_pretrained(CACHE_DIR, safe_serialization=True)
    print("Done------" + temp_dir)
